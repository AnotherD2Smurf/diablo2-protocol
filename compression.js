/* globals System, BattleNet */

const Bridge = require('bridge.net')

Bridge.assembly('Demo', function ($asm, globals) {
  'use strict'

  Bridge.define('BattleNet.Huffman', {
    statics: {
      fields: {
        IndexTable: null,
        CharacterTable: null,
        BitMasks: null,
        CompressionTable: null
      },
      ctors: {
        init: function () {
          this.IndexTable = System.Array.init([
            583,
            566,
            549,
            532,
            515,
            498,
            481,
            464,
            447,
            430,
            413,
            396,
            379,
            362,
            353,
            344,
            335,
            326,
            317,
            308,
            299,
            290,
            281,
            272,
            263,
            254,
            245,
            236,
            227,
            218,
            209,
            200,
            191,
            182,
            173,
            168,
            163,
            158,
            153,
            148,
            143,
            138,
            133,
            128,
            123,
            118,
            113,
            108,
            105,
            102,
            99,
            96,
            93,
            90,
            87,
            84,
            81,
            78,
            75,
            72,
            69,
            66,
            63,
            63,
            60,
            60,
            57,
            57,
            54,
            54,
            51,
            51,
            48,
            48,
            45,
            45,
            42,
            42,
            39,
            39,
            36,
            36,
            33,
            33,
            30,
            30,
            27,
            27,
            24,
            24,
            21,
            21,
            18,
            18,
            18,
            18,
            15,
            15,
            15,
            15,
            12,
            12,
            12,
            12,
            9,
            9,
            9,
            9,
            6,
            6,
            6,
            6,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ], System.UInt32)
          this.CharacterTable = System.Array.init([
            0,
            0,
            1,
            0,
            1,
            4,
            0,
            255,
            6,
            0,
            20,
            6,
            0,
            19,
            6,
            0,
            5,
            6,
            0,
            2,
            6,
            0,
            128,
            7,
            0,
            109,
            7,
            0,
            105,
            7,
            0,
            104,
            7,
            0,
            103,
            7,
            0,
            30,
            7,
            0,
            21,
            7,
            0,
            18,
            7,
            0,
            13,
            7,
            0,
            10,
            7,
            0,
            8,
            7,
            0,
            7,
            7,
            0,
            6,
            7,
            0,
            4,
            7,
            0,
            3,
            7,
            0,
            108,
            8,
            0,
            81,
            8,
            0,
            32,
            8,
            0,
            31,
            8,
            0,
            29,
            8,
            0,
            24,
            8,
            0,
            23,
            8,
            0,
            22,
            8,
            0,
            17,
            8,
            0,
            16,
            8,
            0,
            15,
            8,
            0,
            12,
            8,
            0,
            11,
            8,
            0,
            9,
            8,
            1,
            150,
            9,
            151,
            9,
            1,
            144,
            9,
            149,
            9,
            1,
            100,
            9,
            107,
            9,
            1,
            98,
            9,
            99,
            9,
            1,
            86,
            9,
            88,
            9,
            1,
            82,
            9,
            85,
            9,
            1,
            77,
            9,
            80,
            9,
            1,
            69,
            9,
            76,
            9,
            1,
            64,
            9,
            67,
            9,
            1,
            49,
            9,
            59,
            9,
            1,
            40,
            9,
            48,
            9,
            1,
            26,
            9,
            37,
            9,
            1,
            14,
            9,
            25,
            9,
            2,
            226,
            10,
            232,
            10,
            240,
            10,
            248,
            10,
            2,
            192,
            10,
            194,
            10,
            206,
            10,
            224,
            10,
            2,
            160,
            10,
            162,
            10,
            176,
            10,
            184,
            10,
            2,
            138,
            10,
            143,
            10,
            147,
            10,
            152,
            10,
            2,
            129,
            10,
            130,
            10,
            131,
            10,
            137,
            10,
            2,
            124,
            10,
            125,
            10,
            126,
            10,
            127,
            10,
            2,
            119,
            10,
            120,
            10,
            121,
            10,
            122,
            10,
            2,
            115,
            10,
            116,
            10,
            117,
            10,
            118,
            10,
            2,
            110,
            10,
            111,
            10,
            112,
            10,
            114,
            10,
            2,
            97,
            10,
            101,
            10,
            102,
            10,
            106,
            10,
            2,
            93,
            10,
            94,
            10,
            95,
            10,
            96,
            10,
            2,
            87,
            10,
            89,
            10,
            90,
            10,
            91,
            10,
            2,
            74,
            10,
            75,
            10,
            78,
            10,
            83,
            10,
            2,
            70,
            10,
            71,
            10,
            72,
            10,
            73,
            10,
            2,
            63,
            10,
            65,
            10,
            66,
            10,
            68,
            10,
            2,
            58,
            10,
            60,
            10,
            61,
            10,
            62,
            10,
            2,
            54,
            10,
            55,
            10,
            56,
            10,
            57,
            10,
            2,
            50,
            10,
            51,
            10,
            52,
            10,
            53,
            10,
            2,
            43,
            10,
            44,
            10,
            45,
            10,
            46,
            10,
            2,
            38,
            10,
            39,
            10,
            41,
            10,
            42,
            10,
            2,
            33,
            10,
            34,
            10,
            35,
            10,
            36,
            10,
            3,
            251,
            11,
            252,
            11,
            253,
            11,
            254,
            11,
            27,
            10,
            27,
            10,
            28,
            10,
            28,
            10,
            3,
            242,
            11,
            243,
            11,
            244,
            11,
            245,
            11,
            246,
            11,
            247,
            11,
            249,
            11,
            250,
            11,
            3,
            233,
            11,
            234,
            11,
            235,
            11,
            236,
            11,
            237,
            11,
            238,
            11,
            239,
            11,
            241,
            11,
            3,
            222,
            11,
            223,
            11,
            225,
            11,
            227,
            11,
            228,
            11,
            229,
            11,
            230,
            11,
            231,
            11,
            3,
            214,
            11,
            215,
            11,
            216,
            11,
            217,
            11,
            218,
            11,
            219,
            11,
            220,
            11,
            221,
            11,
            3,
            205,
            11,
            207,
            11,
            208,
            11,
            209,
            11,
            210,
            11,
            211,
            11,
            212,
            11,
            213,
            11,
            3,
            197,
            11,
            198,
            11,
            199,
            11,
            200,
            11,
            201,
            11,
            202,
            11,
            203,
            11,
            204,
            11,
            3,
            187,
            11,
            188,
            11,
            189,
            11,
            190,
            11,
            191,
            11,
            193,
            11,
            195,
            11,
            196,
            11,
            3,
            178,
            11,
            179,
            11,
            180,
            11,
            181,
            11,
            182,
            11,
            183,
            11,
            185,
            11,
            186,
            11,
            3,
            169,
            11,
            170,
            11,
            171,
            11,
            172,
            11,
            173,
            11,
            174,
            11,
            175,
            11,
            177,
            11,
            3,
            159,
            11,
            161,
            11,
            163,
            11,
            164,
            11,
            165,
            11,
            166,
            11,
            167,
            11,
            168,
            11,
            3,
            146,
            11,
            148,
            11,
            153,
            11,
            154,
            11,
            155,
            11,
            156,
            11,
            157,
            11,
            158,
            11,
            3,
            134,
            11,
            135,
            11,
            136,
            11,
            139,
            11,
            140,
            11,
            141,
            11,
            142,
            11,
            145,
            11,
            3,
            47,
            11,
            79,
            11,
            84,
            11,
            92,
            11,
            113,
            11,
            123,
            11,
            132,
            11,
            133,
            11
          ], System.Byte)
          this.BitMasks = System.Array.init([
            0,
            1,
            3,
            7,
            15,
            31,
            63,
            127,
            255,
            511,
            1023,
            2047,
            4095,
            8191,
            16383,
            32767
          ], System.UInt32)
          this.CompressionTable = System.Array.init([
            2147549184,
            1879310336,
            1543897088,
            1040646144,
            1074200576,
            1611005952,
            1107755008,
            1141309440,
            1174863872,
            805830656,
            1208418304,
            822607872,
            839385088,
            1241972736,
            587727104,
            856162304,
            872939520,
            889716736,
            1275527168,
            1678114816,
            1745223680,
            1309081600,
            906493952,
            923271168,
            940048384,
            587727105,
            604504320,
            218563334,
            218563335,
            956825600,
            1342636032,
            973602816,
            990380032,
            235405824,
            235405825,
            235405826,
            235405827,
            604504321,
            252183040,
            252183041,
            621281536,
            252183042,
            252183043,
            268960256,
            268960257,
            268960258,
            268960259,
            525056,
            621281537,
            638058752,
            285737472,
            285737473,
            285737474,
            285737475,
            302514688,
            302514689,
            302514690,
            302514691,
            319291904,
            638058753,
            319291905,
            319291906,
            319291907,
            336069120,
            654835968,
            336069121,
            336069122,
            654835969,
            336069123,
            671613184,
            352846336,
            352846337,
            352846338,
            352846339,
            369623552,
            369623553,
            671613185,
            688390400,
            369623554,
            525057,
            688390401,
            1007157248,
            705167616,
            369623555,
            525058,
            705167617,
            721944832,
            386400768,
            721944833,
            386400769,
            386400770,
            386400771,
            525059,
            403177984,
            403177985,
            403177986,
            403177987,
            419955200,
            738722048,
            738722049,
            755499264,
            419955201,
            419955202,
            1376190464,
            1409744896,
            1443299328,
            419955203,
            755499265,
            1023934464,
            1476853760,
            436732416,
            436732417,
            436732418,
            525060,
            436732419,
            453509632,
            453509633,
            453509634,
            453509635,
            470286848,
            470286849,
            470286850,
            470286851,
            525061,
            487064064,
            487064065,
            487064066,
            487064067,
            1510408192,
            503841280,
            503841281,
            503841282,
            525062,
            525063,
            17302272,
            17302273,
            17302274,
            503841283,
            520618496,
            17302275,
            17302276,
            17302277,
            17302278,
            520618497,
            772276480,
            17302279,
            34079488,
            520618498,
            34079489,
            772276481,
            789053696,
            789053697,
            520618499,
            34079490,
            34079491,
            34079492,
            34079493,
            34079494,
            34079495,
            50856704,
            537395712,
            50856705,
            537395713,
            50856706,
            50856707,
            50856708,
            50856709,
            50856710,
            50856711,
            67633920,
            67633921,
            67633922,
            67633923,
            67633924,
            67633925,
            67633926,
            537395714,
            67633927,
            84411136,
            84411137,
            84411138,
            84411139,
            84411140,
            84411141,
            537395715,
            84411142,
            84411143,
            101188352,
            101188353,
            101188354,
            101188355,
            101188356,
            554172928,
            101188357,
            554172929,
            101188358,
            101188359,
            117965568,
            117965569,
            117965570,
            117965571,
            117965572,
            117965573,
            117965574,
            117965575,
            134742784,
            554172930,
            134742785,
            134742786,
            134742787,
            134742788,
            134742789,
            134742790,
            134742791,
            151520000,
            151520001,
            151520002,
            151520003,
            151520004,
            151520005,
            151520006,
            151520007,
            168297216,
            168297217,
            554172931,
            168297218,
            570950144,
            168297219,
            168297220,
            168297221,
            168297222,
            168297223,
            570950145,
            185074432,
            185074433,
            185074434,
            185074435,
            185074436,
            185074437,
            185074438,
            570950146,
            185074439,
            201851648,
            201851649,
            201851650,
            201851651,
            201851652,
            201851653,
            570950147,
            201851654,
            201851655,
            218628864,
            218628865,
            218628866,
            218628867,
            1812332544
          ], System.UInt32)
        }
      },
      methods: {
        Decompress: function (input, output) {
          if (input == null) {
            throw new System.ArgumentNullException('input')
          }

          var size = input.length

          var result = { v: System.Array.init(1024, 0, System.Byte) }

          var b = 0

          var i = 0
          var max = (result.v.length) >>> 0
          var j = 0
          var count = 32

          while (true) {
            var a
            if (count >= 8) {
              while (size > 0 && count >= 8) {
                count = (count - 8) >>> 0
                size = (size - 1) | 0
                a = (input[System.Array.index(Bridge.identity(i, (i = (i + 1) >>> 0)), input)] << (count | 0)) >>> 0
                b = (b | a) >>> 0
              }
            }

            var index = BattleNet.Huffman.IndexTable[System.Array.index(b >>> 24, BattleNet.Huffman.IndexTable)]
            a = BattleNet.Huffman.CharacterTable[System.Array.index(index, BattleNet.Huffman.CharacterTable)]
            var d = ((b >>> (((((24 - a) >>> 0))) | 0)) & BattleNet.Huffman.BitMasks[System.Array.index(a, BattleNet.Huffman.BitMasks)]) >>> 0
            var c = BattleNet.Huffman.CharacterTable[System.Array.index(((((index + Bridge.Int.umul(2, d)) >>> 0) + 2) >>> 0), BattleNet.Huffman.CharacterTable)]

            count = (count + c) >>> 0
            if (count > 32) {
              var actual = (((result.v.length) >>> 0) - max) >>> 0
              output.v = System.Array.init(actual, 0, System.Byte)
              System.Array.copy(result.v, 0, output.v, 0, (actual | 0))
              return
            }

            max = (max - 1) >>> 0
            if (max === 0) {
              System.Array.resize(result, Bridge.Int.mul(result.v.length, 2), 0)
            }

            a = BattleNet.Huffman.CharacterTable[System.Array.index(((((index + Bridge.Int.umul(2, d)) >>> 0) + 1) >>> 0), BattleNet.Huffman.CharacterTable)]
            result.v[System.Array.index(Bridge.identity(j, (j = (j + 1) | 0)), result.v)] = a & 255

            b = (b << (c & 255)) >>> 0
          }
        },
        Compress: function (input, output) {
          if (input == null) {
            throw new System.ArgumentNullException('input')
          }

          var bufferValue = 0
          var count = 0
          var i = input.length; var x = 0
          var j = 0
          output.v = System.Array.init(input.length, 0, System.Byte)

          while (i !== 0) {
            var a = BattleNet.Huffman.CompressionTable[System.Array.index(input[System.Array.index(Bridge.identity(x, (x = (x + 1) | 0)), input)], BattleNet.Huffman.CompressionTable)]
            i = (i - 1) | 0
            var e = (((a & 65280) >>> 0)) >>> 8

            bufferValue = (bufferValue | ((((a >>> 24) << (((24 - count) | 0))) >>> 0))) >>> 0
            count = (count + ((((((a & 16711680) >>> 0)) >>> 16) | 0))) | 0

            if (e !== 0) {
              bufferValue = (bufferValue | (((((((((a & 255) >>> 0)) << (((((8 - e) >>> 0))) | 0)) >>> 0)) << (((24 - count) | 0))) >>> 0))) >>> 0
              count = (count + (e | 0)) | 0
            }

            while (count > 8) {
              output.v[System.Array.index(Bridge.identity(j, (j = (j + 1) | 0)), output.v)] = (bufferValue >>> 24) & 255
              count = (count - 8) | 0
              bufferValue = (bufferValue << 8) >>> 0
            }
          }

          while (count > 0) {
            output.v[System.Array.index(Bridge.identity(j, (j = (j + 1) | 0)), output.v)] = (bufferValue >>> 24) & 255
            bufferValue = (bufferValue << 8) >>> 0
            count = (count - 8) | 0
          }

          return (j >>> 0)
        },
        GetPacketSize: function (buffer, headerSize) {
          if (buffer[0] < 240) {
            headerSize.v = 1
            return ((buffer[0] - 1) | 0)
          }

          headerSize.v = 2
          return ((((((buffer[0] & 15) << 8) + buffer[1]) | 0) - 2) | 0)
        }
      }
    }
  })
})

function compress (input) {
  let result
  Bridge.assembly('Demo', function ($asm, globals) {
    'use strict'

    Bridge.init(function () {
      let output = {}

      BattleNet.Huffman.Compress(input, output)
      result = Buffer.from(output.v)
    })
  })
  return result
}

function decompress (input) {
  let result
  Bridge.assembly('Demo', function ($asm, globals) {
    'use strict'

    Bridge.init(function () {
      let output = {}

      BattleNet.Huffman.Decompress(input, output)
      result = Buffer.from(output.v)
    })
  })
  return result
}

function getPacketSize (input) {
  let result
  Bridge.assembly('Demo', function ($asm, globals) {
    'use strict'

    Bridge.init(function () {
      let output = {}

      let payloadSize = BattleNet.Huffman.GetPacketSize(input, output)
      result = { payloadSize, headerSize: output.v }
    })
  })
  return result
}

module.exports = { compress, decompress, getPacketSize }
